// Code generated by protoc-gen-go. DO NOT EDIT.
// source: schema.proto

/*
Package protos is a generated protocol buffer package.

It is generated from these files:
	schema.proto

It has these top-level messages:
	Message
	PrePrepare
	Prepare
	Commit
	Error
	ViewChange
	ViewData
	SignedViewData
	NewView
	HeartBeat
	Signature
	Proposal
*/
package protos

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Message struct {
	// Types that are valid to be assigned to Content:
	//	*Message_PrePrepare
	//	*Message_Prepare
	//	*Message_Commit
	//	*Message_Error
	//	*Message_ViewChange
	//	*Message_ViewData
	//	*Message_NewView
	//	*Message_HeartBeat
	Content isMessage_Content `protobuf_oneof:"content"`
}

func (m *Message) Reset()                    { *m = Message{} }
func (m *Message) String() string            { return proto.CompactTextString(m) }
func (*Message) ProtoMessage()               {}
func (*Message) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type isMessage_Content interface{ isMessage_Content() }

type Message_PrePrepare struct {
	PrePrepare *PrePrepare `protobuf:"bytes,1,opt,name=pre_prepare,json=prePrepare,oneof"`
}
type Message_Prepare struct {
	Prepare *Prepare `protobuf:"bytes,2,opt,name=prepare,oneof"`
}
type Message_Commit struct {
	Commit *Commit `protobuf:"bytes,3,opt,name=commit,oneof"`
}
type Message_Error struct {
	Error *Error `protobuf:"bytes,4,opt,name=error,oneof"`
}
type Message_ViewChange struct {
	ViewChange *ViewChange `protobuf:"bytes,5,opt,name=view_change,json=viewChange,oneof"`
}
type Message_ViewData struct {
	ViewData *SignedViewData `protobuf:"bytes,6,opt,name=view_data,json=viewData,oneof"`
}
type Message_NewView struct {
	NewView *NewView `protobuf:"bytes,7,opt,name=new_view,json=newView,oneof"`
}
type Message_HeartBeat struct {
	HeartBeat *HeartBeat `protobuf:"bytes,8,opt,name=heart_beat,json=heartBeat,oneof"`
}

func (*Message_PrePrepare) isMessage_Content() {}
func (*Message_Prepare) isMessage_Content()    {}
func (*Message_Commit) isMessage_Content()     {}
func (*Message_Error) isMessage_Content()      {}
func (*Message_ViewChange) isMessage_Content() {}
func (*Message_ViewData) isMessage_Content()   {}
func (*Message_NewView) isMessage_Content()    {}
func (*Message_HeartBeat) isMessage_Content()  {}

func (m *Message) GetContent() isMessage_Content {
	if m != nil {
		return m.Content
	}
	return nil
}

func (m *Message) GetPrePrepare() *PrePrepare {
	if x, ok := m.GetContent().(*Message_PrePrepare); ok {
		return x.PrePrepare
	}
	return nil
}

func (m *Message) GetPrepare() *Prepare {
	if x, ok := m.GetContent().(*Message_Prepare); ok {
		return x.Prepare
	}
	return nil
}

func (m *Message) GetCommit() *Commit {
	if x, ok := m.GetContent().(*Message_Commit); ok {
		return x.Commit
	}
	return nil
}

func (m *Message) GetError() *Error {
	if x, ok := m.GetContent().(*Message_Error); ok {
		return x.Error
	}
	return nil
}

func (m *Message) GetViewChange() *ViewChange {
	if x, ok := m.GetContent().(*Message_ViewChange); ok {
		return x.ViewChange
	}
	return nil
}

func (m *Message) GetViewData() *SignedViewData {
	if x, ok := m.GetContent().(*Message_ViewData); ok {
		return x.ViewData
	}
	return nil
}

func (m *Message) GetNewView() *NewView {
	if x, ok := m.GetContent().(*Message_NewView); ok {
		return x.NewView
	}
	return nil
}

func (m *Message) GetHeartBeat() *HeartBeat {
	if x, ok := m.GetContent().(*Message_HeartBeat); ok {
		return x.HeartBeat
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Message) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Message_OneofMarshaler, _Message_OneofUnmarshaler, _Message_OneofSizer, []interface{}{
		(*Message_PrePrepare)(nil),
		(*Message_Prepare)(nil),
		(*Message_Commit)(nil),
		(*Message_Error)(nil),
		(*Message_ViewChange)(nil),
		(*Message_ViewData)(nil),
		(*Message_NewView)(nil),
		(*Message_HeartBeat)(nil),
	}
}

func _Message_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Message)
	// content
	switch x := m.Content.(type) {
	case *Message_PrePrepare:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.PrePrepare); err != nil {
			return err
		}
	case *Message_Prepare:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Prepare); err != nil {
			return err
		}
	case *Message_Commit:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Commit); err != nil {
			return err
		}
	case *Message_Error:
		b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Error); err != nil {
			return err
		}
	case *Message_ViewChange:
		b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ViewChange); err != nil {
			return err
		}
	case *Message_ViewData:
		b.EncodeVarint(6<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ViewData); err != nil {
			return err
		}
	case *Message_NewView:
		b.EncodeVarint(7<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.NewView); err != nil {
			return err
		}
	case *Message_HeartBeat:
		b.EncodeVarint(8<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.HeartBeat); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("Message.Content has unexpected type %T", x)
	}
	return nil
}

func _Message_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Message)
	switch tag {
	case 1: // content.pre_prepare
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(PrePrepare)
		err := b.DecodeMessage(msg)
		m.Content = &Message_PrePrepare{msg}
		return true, err
	case 2: // content.prepare
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Prepare)
		err := b.DecodeMessage(msg)
		m.Content = &Message_Prepare{msg}
		return true, err
	case 3: // content.commit
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Commit)
		err := b.DecodeMessage(msg)
		m.Content = &Message_Commit{msg}
		return true, err
	case 4: // content.error
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Error)
		err := b.DecodeMessage(msg)
		m.Content = &Message_Error{msg}
		return true, err
	case 5: // content.view_change
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ViewChange)
		err := b.DecodeMessage(msg)
		m.Content = &Message_ViewChange{msg}
		return true, err
	case 6: // content.view_data
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(SignedViewData)
		err := b.DecodeMessage(msg)
		m.Content = &Message_ViewData{msg}
		return true, err
	case 7: // content.new_view
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(NewView)
		err := b.DecodeMessage(msg)
		m.Content = &Message_NewView{msg}
		return true, err
	case 8: // content.heart_beat
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(HeartBeat)
		err := b.DecodeMessage(msg)
		m.Content = &Message_HeartBeat{msg}
		return true, err
	default:
		return false, nil
	}
}

func _Message_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Message)
	// content
	switch x := m.Content.(type) {
	case *Message_PrePrepare:
		s := proto.Size(x.PrePrepare)
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Message_Prepare:
		s := proto.Size(x.Prepare)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Message_Commit:
		s := proto.Size(x.Commit)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Message_Error:
		s := proto.Size(x.Error)
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Message_ViewChange:
		s := proto.Size(x.ViewChange)
		n += proto.SizeVarint(5<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Message_ViewData:
		s := proto.Size(x.ViewData)
		n += proto.SizeVarint(6<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Message_NewView:
		s := proto.Size(x.NewView)
		n += proto.SizeVarint(7<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Message_HeartBeat:
		s := proto.Size(x.HeartBeat)
		n += proto.SizeVarint(8<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type PrePrepare struct {
	View     uint64 `protobuf:"varint,1,opt,name=view" json:"view,omitempty"`
	Seq      uint64 `protobuf:"varint,2,opt,name=seq" json:"seq,omitempty"`
	Payload  []byte `protobuf:"bytes,3,opt,name=payload,proto3" json:"payload,omitempty"`
	Header   []byte `protobuf:"bytes,4,opt,name=header,proto3" json:"header,omitempty"`
	Metadata []byte `protobuf:"bytes,5,opt,name=metadata,proto3" json:"metadata,omitempty"`
}

func (m *PrePrepare) Reset()                    { *m = PrePrepare{} }
func (m *PrePrepare) String() string            { return proto.CompactTextString(m) }
func (*PrePrepare) ProtoMessage()               {}
func (*PrePrepare) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *PrePrepare) GetView() uint64 {
	if m != nil {
		return m.View
	}
	return 0
}

func (m *PrePrepare) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *PrePrepare) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (m *PrePrepare) GetHeader() []byte {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *PrePrepare) GetMetadata() []byte {
	if m != nil {
		return m.Metadata
	}
	return nil
}

type Prepare struct {
	View   uint64 `protobuf:"varint,1,opt,name=view" json:"view,omitempty"`
	Seq    uint64 `protobuf:"varint,2,opt,name=seq" json:"seq,omitempty"`
	Digest []byte `protobuf:"bytes,3,opt,name=digest,proto3" json:"digest,omitempty"`
}

func (m *Prepare) Reset()                    { *m = Prepare{} }
func (m *Prepare) String() string            { return proto.CompactTextString(m) }
func (*Prepare) ProtoMessage()               {}
func (*Prepare) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Prepare) GetView() uint64 {
	if m != nil {
		return m.View
	}
	return 0
}

func (m *Prepare) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *Prepare) GetDigest() []byte {
	if m != nil {
		return m.Digest
	}
	return nil
}

type Commit struct {
	View      uint64 `protobuf:"varint,1,opt,name=view" json:"view,omitempty"`
	Seq       uint64 `protobuf:"varint,2,opt,name=seq" json:"seq,omitempty"`
	Digest    []byte `protobuf:"bytes,3,opt,name=digest,proto3" json:"digest,omitempty"`
	SignerId  uint64 `protobuf:"varint,4,opt,name=signer_id,json=signerId" json:"signer_id,omitempty"`
	Signature []byte `protobuf:"bytes,5,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (m *Commit) Reset()                    { *m = Commit{} }
func (m *Commit) String() string            { return proto.CompactTextString(m) }
func (*Commit) ProtoMessage()               {}
func (*Commit) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *Commit) GetView() uint64 {
	if m != nil {
		return m.View
	}
	return 0
}

func (m *Commit) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *Commit) GetDigest() []byte {
	if m != nil {
		return m.Digest
	}
	return nil
}

func (m *Commit) GetSignerId() uint64 {
	if m != nil {
		return m.SignerId
	}
	return 0
}

func (m *Commit) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

type Error struct {
	View   uint64 `protobuf:"varint,1,opt,name=view" json:"view,omitempty"`
	Seq    uint64 `protobuf:"varint,2,opt,name=seq" json:"seq,omitempty"`
	Digest []byte `protobuf:"bytes,3,opt,name=digest,proto3" json:"digest,omitempty"`
	Reason string `protobuf:"bytes,4,opt,name=reason" json:"reason,omitempty"`
}

func (m *Error) Reset()                    { *m = Error{} }
func (m *Error) String() string            { return proto.CompactTextString(m) }
func (*Error) ProtoMessage()               {}
func (*Error) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *Error) GetView() uint64 {
	if m != nil {
		return m.View
	}
	return 0
}

func (m *Error) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *Error) GetDigest() []byte {
	if m != nil {
		return m.Digest
	}
	return nil
}

func (m *Error) GetReason() string {
	if m != nil {
		return m.Reason
	}
	return ""
}

type ViewChange struct {
	NextView uint64 `protobuf:"varint,1,opt,name=next_view,json=nextView" json:"next_view,omitempty"`
	Reason   string `protobuf:"bytes,2,opt,name=reason" json:"reason,omitempty"`
}

func (m *ViewChange) Reset()                    { *m = ViewChange{} }
func (m *ViewChange) String() string            { return proto.CompactTextString(m) }
func (*ViewChange) ProtoMessage()               {}
func (*ViewChange) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *ViewChange) GetNextView() uint64 {
	if m != nil {
		return m.NextView
	}
	return 0
}

func (m *ViewChange) GetReason() string {
	if m != nil {
		return m.Reason
	}
	return ""
}

type ViewData struct {
	NextView               uint64       `protobuf:"varint,1,opt,name=next_view,json=nextView" json:"next_view,omitempty"`
	LastDecision           *Proposal    `protobuf:"bytes,2,opt,name=last_decision,json=lastDecision" json:"last_decision,omitempty"`
	LastDecisionSignatures []*Signature `protobuf:"bytes,3,rep,name=last_decision_signatures,json=lastDecisionSignatures" json:"last_decision_signatures,omitempty"`
	LastPrePrepare         *PrePrepare  `protobuf:"bytes,4,opt,name=last_pre_prepare,json=lastPrePrepare" json:"last_pre_prepare,omitempty"`
	LastPrepare            *Prepare     `protobuf:"bytes,5,opt,name=last_prepare,json=lastPrepare" json:"last_prepare,omitempty"`
	LastCommit             *Commit      `protobuf:"bytes,6,opt,name=last_commit,json=lastCommit" json:"last_commit,omitempty"`
}

func (m *ViewData) Reset()                    { *m = ViewData{} }
func (m *ViewData) String() string            { return proto.CompactTextString(m) }
func (*ViewData) ProtoMessage()               {}
func (*ViewData) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *ViewData) GetNextView() uint64 {
	if m != nil {
		return m.NextView
	}
	return 0
}

func (m *ViewData) GetLastDecision() *Proposal {
	if m != nil {
		return m.LastDecision
	}
	return nil
}

func (m *ViewData) GetLastDecisionSignatures() []*Signature {
	if m != nil {
		return m.LastDecisionSignatures
	}
	return nil
}

func (m *ViewData) GetLastPrePrepare() *PrePrepare {
	if m != nil {
		return m.LastPrePrepare
	}
	return nil
}

func (m *ViewData) GetLastPrepare() *Prepare {
	if m != nil {
		return m.LastPrepare
	}
	return nil
}

func (m *ViewData) GetLastCommit() *Commit {
	if m != nil {
		return m.LastCommit
	}
	return nil
}

type SignedViewData struct {
	RawViewData []byte     `protobuf:"bytes,1,opt,name=raw_view_data,json=rawViewData,proto3" json:"raw_view_data,omitempty"`
	Signature   *Signature `protobuf:"bytes,2,opt,name=signature" json:"signature,omitempty"`
}

func (m *SignedViewData) Reset()                    { *m = SignedViewData{} }
func (m *SignedViewData) String() string            { return proto.CompactTextString(m) }
func (*SignedViewData) ProtoMessage()               {}
func (*SignedViewData) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *SignedViewData) GetRawViewData() []byte {
	if m != nil {
		return m.RawViewData
	}
	return nil
}

func (m *SignedViewData) GetSignature() *Signature {
	if m != nil {
		return m.Signature
	}
	return nil
}

type NewView struct {
	SignedViewData []*SignedViewData `protobuf:"bytes,2,rep,name=signed_view_data,json=signedViewData" json:"signed_view_data,omitempty"`
}

func (m *NewView) Reset()                    { *m = NewView{} }
func (m *NewView) String() string            { return proto.CompactTextString(m) }
func (*NewView) ProtoMessage()               {}
func (*NewView) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *NewView) GetSignedViewData() []*SignedViewData {
	if m != nil {
		return m.SignedViewData
	}
	return nil
}

type HeartBeat struct {
	View int64  `protobuf:"varint,1,opt,name=view" json:"view,omitempty"`
	Seq  uint64 `protobuf:"varint,2,opt,name=seq" json:"seq,omitempty"`
}

func (m *HeartBeat) Reset()                    { *m = HeartBeat{} }
func (m *HeartBeat) String() string            { return proto.CompactTextString(m) }
func (*HeartBeat) ProtoMessage()               {}
func (*HeartBeat) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *HeartBeat) GetView() int64 {
	if m != nil {
		return m.View
	}
	return 0
}

func (m *HeartBeat) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

type Signature struct {
	Signer uint64 `protobuf:"varint,1,opt,name=signer" json:"signer,omitempty"`
	Value  []byte `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *Signature) Reset()                    { *m = Signature{} }
func (m *Signature) String() string            { return proto.CompactTextString(m) }
func (*Signature) ProtoMessage()               {}
func (*Signature) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *Signature) GetSigner() uint64 {
	if m != nil {
		return m.Signer
	}
	return 0
}

func (m *Signature) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

type Proposal struct {
	Header               []byte `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Payload              []byte `protobuf:"bytes,2,opt,name=payload,proto3" json:"payload,omitempty"`
	Metadata             []byte `protobuf:"bytes,3,opt,name=metadata,proto3" json:"metadata,omitempty"`
	VerificationSequence uint64 `protobuf:"varint,4,opt,name=verification_sequence,json=verificationSequence" json:"verification_sequence,omitempty"`
}

func (m *Proposal) Reset()                    { *m = Proposal{} }
func (m *Proposal) String() string            { return proto.CompactTextString(m) }
func (*Proposal) ProtoMessage()               {}
func (*Proposal) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *Proposal) GetHeader() []byte {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *Proposal) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (m *Proposal) GetMetadata() []byte {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *Proposal) GetVerificationSequence() uint64 {
	if m != nil {
		return m.VerificationSequence
	}
	return 0
}

func init() {
	proto.RegisterType((*Message)(nil), "protos.Message")
	proto.RegisterType((*PrePrepare)(nil), "protos.PrePrepare")
	proto.RegisterType((*Prepare)(nil), "protos.Prepare")
	proto.RegisterType((*Commit)(nil), "protos.Commit")
	proto.RegisterType((*Error)(nil), "protos.Error")
	proto.RegisterType((*ViewChange)(nil), "protos.ViewChange")
	proto.RegisterType((*ViewData)(nil), "protos.ViewData")
	proto.RegisterType((*SignedViewData)(nil), "protos.SignedViewData")
	proto.RegisterType((*NewView)(nil), "protos.NewView")
	proto.RegisterType((*HeartBeat)(nil), "protos.HeartBeat")
	proto.RegisterType((*Signature)(nil), "protos.Signature")
	proto.RegisterType((*Proposal)(nil), "protos.Proposal")
}

func init() { proto.RegisterFile("schema.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 698 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x55, 0xdd, 0x6a, 0x13, 0x41,
	0x14, 0xce, 0xef, 0xfe, 0x9c, 0xa4, 0x31, 0x0e, 0x35, 0x2c, 0xea, 0x45, 0x59, 0x10, 0x0a, 0x4a,
	0x8b, 0x29, 0xbd, 0x10, 0xbc, 0xd0, 0xb6, 0x62, 0xa4, 0x28, 0x65, 0x0a, 0xde, 0xc9, 0x32, 0xdd,
	0x3d, 0x26, 0x0b, 0xc9, 0xee, 0x76, 0x66, 0x9a, 0xe8, 0x9d, 0x3e, 0x80, 0x0f, 0xe0, 0x4b, 0xf9,
	0x4c, 0x32, 0x3f, 0xbb, 0xd9, 0x85, 0x56, 0x90, 0x5e, 0x65, 0xce, 0x9c, 0xef, 0x3b, 0x33, 0x73,
	0xf6, 0x3b, 0x5f, 0x60, 0x28, 0xe2, 0x05, 0xae, 0xd8, 0x41, 0xc1, 0x73, 0x99, 0x13, 0x47, 0xff,
	0x88, 0xf0, 0x77, 0x17, 0xdc, 0x8f, 0x28, 0x04, 0x9b, 0x23, 0x39, 0x86, 0x41, 0xc1, 0x31, 0x2a,
	0x38, 0x16, 0x8c, 0x63, 0xd0, 0xde, 0x6b, 0xef, 0x0f, 0xa6, 0xc4, 0x10, 0xc4, 0xc1, 0x05, 0xc7,
	0x0b, 0x93, 0x99, 0xb5, 0x28, 0x14, 0x55, 0x44, 0x9e, 0x83, 0x5b, 0x52, 0x3a, 0x9a, 0xf2, 0xa0,
	0x46, 0xb1, 0xf8, 0x12, 0x41, 0xf6, 0xc1, 0x89, 0xf3, 0xd5, 0x2a, 0x95, 0x41, 0x57, 0x63, 0x47,
	0x25, 0xf6, 0x54, 0xef, 0xce, 0x5a, 0xd4, 0xe6, 0xc9, 0x33, 0xe8, 0x23, 0xe7, 0x39, 0x0f, 0x7a,
	0x1a, 0xb8, 0x53, 0x02, 0xdf, 0xa9, 0xcd, 0x59, 0x8b, 0x9a, 0xac, 0xba, 0xf4, 0x3a, 0xc5, 0x4d,
	0x14, 0x2f, 0x58, 0x36, 0xc7, 0xa0, 0xdf, 0xbc, 0xf4, 0xe7, 0x14, 0x37, 0xa7, 0x3a, 0xa3, 0x2e,
	0xbd, 0xae, 0x22, 0x72, 0x0c, 0xbe, 0xa6, 0x25, 0x4c, 0xb2, 0xc0, 0xd1, 0xa4, 0x49, 0x49, 0xba,
	0x4c, 0xe7, 0x19, 0x26, 0x8a, 0x7a, 0xc6, 0x24, 0x9b, 0xb5, 0xa8, 0xb7, 0xb6, 0x6b, 0xf2, 0x02,
	0xbc, 0x0c, 0x37, 0x91, 0x8a, 0x03, 0xb7, 0xf9, 0xd8, 0x4f, 0xb8, 0x51, 0x14, 0xf5, 0xd8, 0xcc,
	0x2c, 0xc9, 0x14, 0x60, 0x81, 0x8c, 0xcb, 0xe8, 0x0a, 0x99, 0x0c, 0x3c, 0x8d, 0x7f, 0x58, 0xe2,
	0x67, 0x2a, 0x73, 0x82, 0x4c, 0xbd, 0xd9, 0x5f, 0x94, 0xc1, 0x89, 0x0f, 0x6e, 0x9c, 0x67, 0x12,
	0x33, 0x19, 0xfe, 0x68, 0x03, 0x6c, 0xbb, 0x4e, 0x08, 0xf4, 0xf4, 0xb9, 0xea, 0xbb, 0xf4, 0xa8,
	0x5e, 0x93, 0x31, 0x74, 0x05, 0x5e, 0xeb, 0xbe, 0xf7, 0xa8, 0x5a, 0x92, 0x00, 0xdc, 0x82, 0x7d,
	0x5f, 0xe6, 0x2c, 0xd1, 0x1d, 0x1e, 0xd2, 0x32, 0x24, 0x13, 0x70, 0x16, 0xc8, 0x12, 0x34, 0x1d,
	0x1d, 0x52, 0x1b, 0x91, 0xc7, 0xe0, 0xad, 0x50, 0x32, 0xdd, 0x89, 0xbe, 0xce, 0x54, 0x71, 0xf8,
	0x1e, 0xdc, 0xff, 0x3b, 0x7e, 0x02, 0x4e, 0x92, 0xce, 0x51, 0x48, 0x7b, 0xba, 0x8d, 0xc2, 0x9f,
	0x6d, 0x70, 0xcc, 0x27, 0xbe, 0x5f, 0x21, 0xf2, 0x04, 0x7c, 0xa1, 0xbe, 0x0f, 0x8f, 0xd2, 0x44,
	0x3f, 0xa4, 0x47, 0x3d, 0xb3, 0xf1, 0x21, 0x21, 0x4f, 0x4d, 0x92, 0xc9, 0x1b, 0x8e, 0xf6, 0x2d,
	0xdb, 0x8d, 0xf0, 0x0b, 0xf4, 0xb5, 0x78, 0xee, 0x79, 0x83, 0x09, 0x38, 0x1c, 0x99, 0xc8, 0x33,
	0x7d, 0xbc, 0x4f, 0x6d, 0x14, 0xbe, 0x05, 0xd8, 0xca, 0x4d, 0xdd, 0x33, 0xc3, 0x6f, 0x32, 0xaa,
	0x1d, 0xe4, 0xa9, 0x0d, 0x2d, 0x8c, 0x6d, 0x89, 0x4e, 0xa3, 0xc4, 0x9f, 0x0e, 0x78, 0xa5, 0xee,
	0xfe, 0x5d, 0xe1, 0x18, 0x76, 0x96, 0x4c, 0xc8, 0x28, 0xc1, 0x38, 0x15, 0xa9, 0x2d, 0x34, 0x98,
	0x8e, 0xb7, 0xa3, 0x97, 0x17, 0xb9, 0x60, 0x4b, 0x3a, 0x54, 0xb0, 0x33, 0x8b, 0x22, 0xe7, 0x10,
	0x34, 0x68, 0x51, 0xd5, 0x1d, 0x11, 0x74, 0xf7, 0xba, 0x75, 0x7d, 0x5e, 0x96, 0x19, 0x3a, 0xa9,
	0x97, 0xa8, 0xb6, 0x05, 0x79, 0x0d, 0x63, 0x5d, 0xac, 0x6e, 0x1a, 0xbd, 0xbb, 0x4c, 0x83, 0x8e,
	0x14, 0xb6, 0x26, 0xe7, 0x29, 0x0c, 0x4b, 0xb6, 0x66, 0xf6, 0x6f, 0xf5, 0x0e, 0x3a, 0xb0, 0x34,
	0xcd, 0x39, 0x04, 0x1d, 0x46, 0xd6, 0x42, 0x9c, 0xdb, 0x2c, 0x84, 0x82, 0x82, 0x98, 0x75, 0x88,
	0x30, 0x6a, 0x4e, 0x33, 0x09, 0x61, 0x87, 0x33, 0x33, 0xc1, 0x66, 0xf8, 0xdb, 0xfa, 0xe3, 0x0e,
	0x38, 0xdb, 0x54, 0x98, 0xc3, 0xba, 0x8c, 0x3a, 0xcd, 0xb1, 0xdd, 0xb6, 0xa5, 0xa6, 0xac, 0x73,
	0x70, 0xed, 0xf8, 0x93, 0x37, 0x30, 0xd6, 0x72, 0x4c, 0x6a, 0x47, 0x74, 0x74, 0x67, 0xef, 0xf0,
	0x17, 0x3a, 0x12, 0x8d, 0x38, 0x7c, 0x09, 0x7e, 0xe5, 0x0d, 0x0d, 0xa9, 0x76, 0xef, 0x92, 0x6a,
	0xf8, 0x0a, 0xfc, 0xea, 0x5e, 0x4a, 0x5c, 0x66, 0x20, 0xac, 0x68, 0x6c, 0x44, 0x76, 0xa1, 0xbf,
	0x66, 0xcb, 0x1b, 0xf3, 0xa2, 0x21, 0x35, 0x41, 0xf8, 0xab, 0x0d, 0x5e, 0x29, 0x96, 0x9a, 0x45,
	0xb4, 0x1b, 0x16, 0x51, 0x33, 0x95, 0x4e, 0xd3, 0x54, 0xea, 0xe6, 0xd1, 0x6d, 0x9a, 0x07, 0x39,
	0x82, 0x47, 0x6b, 0xe4, 0xe9, 0xd7, 0x34, 0x66, 0x52, 0x6b, 0x0d, 0xaf, 0x6f, 0x30, 0x8b, 0xd1,
	0x8e, 0xed, 0x6e, 0x3d, 0x79, 0x69, 0x73, 0x57, 0xe6, 0x8f, 0xe9, 0xe8, 0x6f, 0x00, 0x00, 0x00,
	0xff, 0xff, 0xcf, 0xe5, 0x79, 0x8f, 0xaf, 0x06, 0x00, 0x00,
}
